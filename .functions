#!/bin/bash
#
#  _______
#  \_   _|
#    |_|horbits 
#
# My bash config

#######################################################
#		GENERAL FUNCTIONS
#######################################################

# Update system packages depending on the distro
update() { 
	local user_id=$(id -u)
	if [ "$user_id" -eq 0 ]; then
		case "$(uname -s)" in
			Linux*)
				if command -v nala &> /dev/null; then
					nala update && nala full-upgrade
				elif command -v pacman &> /dev/null; then
					pacman -Syyu --needed
				elif command -v dnf &> /dev/null; then
					dnf upgrade
				else
					echo "Unsupported Linux distribution"
				fi
				;;
		esac
	else
		case "$(uname -s)" in
			Linux*)
				if command -v sudo &> /dev/null; then
					if command -v nala &> /dev/null; then
						sudo nala update && sudo nala full-upgrade
					elif command -v pacman &> /dev/null; then
						sudo pacman -Syyu --needed
					elif command -v dnf &> /dev/null; then
						sudo dnf upgrade
					else
						echo "Unsupported Linux distribution"
					fi
				fi
				;;
			esac
	fi
}

# Extracts any archive(s) to a specified directory, usage: extract -d /path/to/destination archive1.tar.gz archive2.zip
extract() { 
	local dest_dir="."  # default destination directory
	while getopts ":d:" opt; do
		case $opt in
			d)
				dest_dir="$OPTARG"
				;;
			\?)
				echo "Invalid option: -$OPTARG" >&2
				return 1
				;;
		esac
	done

	shift $((OPTIND - 1))

	for archive in "$@"; do
		if [ -f "$archive" ]; then
			echo "Extracting '$archive' to '$dest_dir'..."
			case $archive in
				*.tar.bz2)   tar xjf "$archive" -C "$dest_dir" ;;
				*.tar.gz)    tar xzf "$archive" -C "$dest_dir" ;;
				*.bz2)       bunzip2 "$archive" ;;
				*.rar)       unrar x "$archive" "$dest_dir" ;;
				*.gz)        gunzip "$archive" ;;
				*.tar)       tar xvf "$archive" -C "$dest_dir" ;;
				*.tbz2)      tar xjf "$archive" -C "$dest_dir" ;;
				*.tgz)       tar xzf "$archive" -C "$dest_dir" ;;
				*.zip)       unzip "$archive" -d "$dest_dir" ;;
				*.Z)         uncompress "$archive" ;;
				*.7z)        7z x "$archive" -o"$dest_dir" ;;
				*.deb)       ar x "$archive" -C "$dest_dir" ;;
				*.tar.xz)    tar xf "$archive" -C "$dest_dir" ;;
				*.tar.zst)   unzstd "$archive" -d "$dest_dir" ;;
				*)
					echo "Unsupported archive format: '$archive'" >&2
					continue
					;;
			esac
			echo "Extraction of '$archive' completed successfully."
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Display CPU temperature (lm-Sensors)
get_temp() { 
	# Check if 'sensors' command is available
	if command -v sensors &>/dev/null; then
	# Extract CPU temperature using 'sensors'
	local cpu_temperature=$(sensors | grep "Core 0" | awk '{print $3}')
        # Check if temperature is not empty
        if [ -n "$cpu_temperature" ]; then
		echo "CPU Temperature: $cpu_temperature"
        else
		echo "Unable to retrieve CPU temperature."
        	fi
	else
        echo "Error: 'lm-sensors' is not installed"
	fi
}

# Display a progress bar (parallel) usage: parabar 1000 10 0.5
parabar() { 
	local range="$1"
	local jobs="$2"
	local sleeptime="${3:-1}"  # Default sleep duration is 1 second
	seq "$range" | parallel -j"$jobs" --bar 'echo {}; sleep '"$sleeptime"'; clear'
}

# Display a progress bar
pbar() { 
	local duration
	local columns
	local space_available
	local fit_to_screen
	local space_reserved

	space_reserved=6   # reserved for % value
	duration=${1}
	columns=$(tput cols)
	space_available=$(( columns-space_reserved ))

	if (( duration < space_available )); then 
		fit_to_screen=1;
	else 
		fit_to_screen=$(( duration / space_available ));
		fit_to_screen=$((fit_to_screen+1));
	fi

	already_done() { for ((done=0; done<(elapsed / fit_to_screen) ; done=done+1 )); do printf ">"; done }
	remaining() { for (( remain=(elapsed/fit_to_screen) ; remain<(duration/fit_to_screen) ; remain=remain+1 )); do printf " "; done }
	percentage() { printf "| %s%%" $(( ((elapsed)*100)/(duration)*100/100 )) | lolcat; }
	clean_line() { printf "\r"; }

	for (( elapsed=1; elapsed<=duration; elapsed=elapsed+1 )); do
		already_done; remaining; percentage
		sleep 1
		clean_line
	done
	clean_line
}

# Colored countdown (figlet lolcat)
cdown() { 
    N=$1 # Capture the argument as N
  # Start a while loop that continues until N is greater than 0
    while ((N-- > 0)); do
    # Display the current countdown number using figlet for ASCII art
    # and lolcat for colored output, then sleep for 1 second
        echo "$N" | figlet -c | lolcat && sleep 1
    done
}

# Simple calculator
calc() { 
	local result=""
	result="$(printf "scale=10;%s\\n" "$*" | bc --mathlib | tr -d '\\\n')"
	#						└─ default (when `--mathlib` is used) is 20

	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		# add "0" for cases like ".5"
		# add "0" for cases like "-.5"
		# remove trailing zeros
		printf "%s" "$result" |
			sed -e 's/^\./0./'  \
			-e 's/^-\./-0./' \
			-e 's/0*$//;s/\.$//'
	else
		printf "%s" "$result"
	fi
	printf "\\n"
}

# Use feh to nicely view images
openimage() {
	local types='*.jpg *.JPG *.png *.PNG *.gif *.GIF *.jpeg *.JPEG'

	cd "$(dirname "$1")" || exit
	local file
	file=$(basename "$1")

	feh -q "$types" --auto-zoom \
		--sort filename --borderless \
		--scale-down --draw-filename \
		--image-bg black \
		--start-at "$file"
}

# Copy file with a progress bar (rsync)
cppb() { 
    # Check if rsync is available
     if ! command -v rsync &>/dev/null; then
	     echo "Error: 'rsync' is not installed"
	     return 1
     fi
    # Check the number of arguments
     if [[ "$#" -ne 2 ]]; then
	     echo "Usage: cppb source_file destination_file"
	     return 1
     fi
    # Run rsync with --progress option
    rsync --progress "$1" "$2"
}

# Copy file with a progress bar (pv)
cppv() { 
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: cppv source_file destination"
        return 1
    fi
    # Check if pv is available
    if ! command -v pv > /dev/null; then
        echo "Error: 'pv' is not installed"
        return 1
    fi
    # Use pv to display a progress bar during copy
    pv "$1" > "$2"
}

# Make a temporary directory and enter it, usage: 'tmpd' or 'tmpd mydir'
tmpd() { 
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

# Copy and go to the directory
cpg() {
    local source="$1"
    local destination="$2"

    if [ -d "$destination" ]; then
        cp "$source" "$destination" && cd "$destination" || return 1
    else
        cp "$source" "$destination" || return 1
    fi
}

# Move and go to the directory
mvg() {
    local source="$1"
    local destination="$2"

    if [ -d "$destination" ]; then
        mv "$source" "$destination" && cd "$destination" || return 1
    else
        mv "$source" "$destination" || return 1
    fi
}

# Create and go to the directory
mkcd(){ NAME=$1; mkdir -p "$NAME"; cd "$NAME"; }

# Determine size of a file or total size of a directory
fdsize() { 
	local arg
	if du -b /dev/null > /dev/null 2>&1; then
		arg=-sbh
	else
		arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg -- .[^.]* *
	fi
}

# Use Git’s colored diff when available
if hash git &>/dev/null ; then
	diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Matrix effect on screen
matrix1() { 
echo -e "\e[32m"  # Set text color to green
while :; do
    for _ in {1..50}; do  # Repeat the animation 50 times for each row
        for _ in {1..80}; do
            r=$((RANDOM % 2))
            if [[ $((RANDOM % 5)) == 1 ]]; then
                if [[ $((RANDOM % 4)) == 1 ]]; then
                    v+="\e[1m $r "  # Bold characters
                else
                    v+="\e[2m $r "  # Dim characters
                fi
            else
                v+=" "
            fi
        done
        echo -e "$v"
        v=""
    done
    sleep 0.1  # Adjust sleep duration for the desired speed
done
}

matrix2() { 
    COL=$(( $(tput cols) / 2 ))
    clear
    tput setaf 2

    while :; do
        tput cup $((RANDOM % COL)) $((RANDOM % COL))
        printf "%$((RANDOM % COL))s" $((RANDOM % 2))
    done
}

matrix3() { 
    echo -ne "\e[32m"
    while true; do
        echo -ne "\e[$(($RANDOM % 2 + 1))m"
        tr -c "[:print:]" " " < /dev/urandom | dd count=1 bs=50 2> /dev/null
    done
}

matrix4() { 
    while [ 1 -lt 2 ]; do
        i=0
        COL=$((RANDOM%$(tput cols)))
        ROW=$((RANDOM%$(tput cols)))

        while [ $i -lt $COL ]; do
            tput cup $i $ROW
            echo -e "\033[0;32m" $(cat /dev/urandom | head -1 | cut -c1-1) 2>/dev/null
            i=$(expr $i + 1)
        done
    done
}

# Search DuckDuckGo and display in terminal (links)
ddg() { 
    ARGS="$@"                  # Store all arguments as a single string in the variable ARGS
    links "https://www.duckduckgo.com/?q=${ARGS}"  # Open DuckDuckGo with the query using 'links'
}

