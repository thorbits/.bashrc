#!/bin/bash
#
#  _______
#  \_   _|
#    |_|horbits 
#
# My bash config

# Record each line as it gets issued
PROMPT_COMMAND='history -a'

#######################################################
#		DRAW BAR
#######################################################

# Show some shell infos
shell_info() { 
	local bash_name=$(ps -p $$ -o comm=)
	echo "   | $bash_name v$BASH_VERSION"
}

# Sends a request to the ipinfo.io API to get the public IP address
get_pip() { 
	local ip
	ip=$(curl -sS ipinfo.io/ip 2>/dev/null) || { echo "Error fetching public IP address"; return 1; }
	echo "$ip"
}

# Show memory usage
memusage() { 
	# Use the free command to get memory information
	local mem_info=$(free --mega -h | grep "Mem:")
	# Extract used memory and total memory
	local used_memory=$(echo "$mem_info" | awk '{print $3}')
	local total_memory=$(echo "$mem_info" | awk '{print $2}')
	# Display the result
	echo "MEM: $used_memory / $total_memory"
}

# Show current date
get_date() { 
	date "+%a-%d-%b"
}

# Menu style bar on top of screen
draw_bar() { 
	# local menu_height=1
	# local menu_width=$(tput cols)
	while true
	do
		printf '\033[K%s' "$(tput sc)$(tput cup 0 0)$(tput rev)$(shell_info)$(printf '%*s' $((COLUMNS-90)) ' ') | $(cpu) | $(memusage) | $(get_pip) | $(get_date) $(tput sgr0)$(tput rc)"
	 	break
	# for ((i=1; i<=menu_height; i++)); do
	# 	printf "\n"
	#	done
	# sleep 2
	done
}


#######################################################
#		PROMPT
#######################################################

# Start a script depending on the installed distro (autojump)
autojump() { 
	distro=$(lsb_release -si 2>/dev/null || cat /etc/os-release | grep '^ID=' | cut -d= -f2)
	case $distro in
		"Debian")
			if [ -f "/usr/share/autojump/autojump.sh" ]; then
				. /usr/share/autojump/autojump.sh
			elif [ -f "/usr/share/autojump/autojump.bash" ]; then
				. /usr/share/autojump/autojump.bash
			else
				echo "Can't find the autojump script."
			fi
			;;
		"arch")
			;;
		"fedora")
			;;
		*)
			echo "Unsupported distribution: $distro"
			;;
	esac
}

# Sum the number of files and sub-directories at the current prompt
lsfiledirsum() { 
	local total_count=$(find . -maxdepth 1 -mindepth 1 -exec echo x \; | wc -l)
	local file_count=$(find . -maxdepth 1 -type f | wc -l)
	local dir_count=$(($total_count - $file_count))
	echo "$dir_count folder(s) $file_count file(s)"
}

# Sum the number of bytes in the current directory
lsbytesum() { 
    local totalBytes=0

    # Use find to get a list of regular files in the current directory
    while IFS= read -r -d '' file; do 
        if [[ -f "$file" ]]; then
            # Increment totalBytes by the size of each regular file
            ((totalBytes += $(stat -c %s "$file" 2>/dev/null)))
        fi
    done < <(find . -maxdepth 1 -type f -print0)

    # Check if bc is available before using it
    if command -v bc &>/dev/null; then
        # Calculate totalMegabytes and print the result
        totalMegabytes=$(echo "scale=3; $totalBytes/1048576" | bc)
        printf "%.3f\n" "$totalMegabytes"
    else
        echo "Error: 'bc' is not installed"
    fi
}

alias cpu="echo 'CPU: $(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {printf("%.1f\n", usage)}')%'"
alias pwd='pwd | sed "s#\(/[^/]\{1,\}/[^/]\{1,\}/[^/]\{1,\}/\).*\(/[^/]\{1,\}/[^/]\{1,\}\)/\{0,1\}#\1_\2#g"'
alias lip="ip addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '127.0.0.1'"
alias dirsize="du -cshx | awk 'END {gsub(/^[ \t]+/, \"\"); print $1}'"

function __setprompt
{
	local LAST_COMMAND=$? # Must come first!

	# Define colors
	local c1='\[\033[0;30m\]' # Color black
	local C1='\[\033[1;30m\]' # Bold color
	local c2='\[\033[0;31m\]' # Color red
	local C2='\[\033[1;31m\]' # Bold color
	local c3='\[\033[0;32m\]' # Color green
	local C3='\[\033[1;32m\]' # Bold color
	local c4='\[\033[0;33m\]' # Color yellow
	local C4='\[\033[1;33m\]' # Bold color
	local c5='\[\033[0;34m\]' # Color blue
	local C5='\[\033[1;34m\]' # Bold color
	local c6='\[\033[0;35m\]' # Color purple
	local C6='\[\033[1;35m\]' # Bold color
	local c7='\[\033[0;36m\]' # Color cyan
	local C7='\[\033[1;36m\]' # Bold color
	local c8='\[\033[0;37m\]' # Color white
	local C8='\[\033[1;37m\]' # Bold color
	local NC='\[\033[0m\]'    # Default color

	# Define line characters
	local LINE_BOTTOM='\342\224\200'
	local LINE_BOTTOM_CORNER='\342\224\224'
	local LINE_STRAIGHT='\342\224\200'
	local LINE_UPPER_CORNER='\342\224\214'

	local t1_bg='\[$(tput setab 31)\]'
	local t1_fg='\[$(tput setaf 31)\]'
	local t2_bg='\[$(tput setab 69)\]'
	local t2_fg='\[$(tput setaf 69)\]'
	local RESET='\[$(tput sgr0)\]'

	local tr1=$(echo -e "${t1_fg}${t2_bg}E0B0${RESET}")
	local tr2=$(echo -e "${t2_fg}E0B0")
	
	# Show error exit code if there is one
	if [[ $LAST_COMMAND != 0 ]]; then
		PS1="   \174Exit Code: $c2${LAST_COMMAND} ("
		if [[ $LAST_COMMAND == 1 ]]; then
			PS1+="General error"
		elif [ $LAST_COMMAND == 2 ]; then
			PS1+="Missing keyword, command, or permission problem"
		elif [ $LAST_COMMAND == 126 ]; then
			PS1+="Permission problem or command is not an executable"
		elif [ $LAST_COMMAND == 127 ]; then
			PS1+="Command not found"
		elif [ $LAST_COMMAND == 128 ]; then
			PS1+="Invalid argument to exit"
		elif [ $LAST_COMMAND == 129 ]; then
			PS1+="Fatal error signal 1"
		elif [ $LAST_COMMAND == 130 ]; then
			PS1+="Script terminated by Control-C"
		elif [ $LAST_COMMAND == 131 ]; then
			PS1+="Fatal error signal 3"
		elif [ $LAST_COMMAND == 132 ]; then
			PS1+="Fatal error signal 4"
		elif [ $LAST_COMMAND == 133 ]; then
			PS1+="Fatal error signal 5"
		elif [ $LAST_COMMAND == 134 ]; then
			PS1+="Fatal error signal 6"
		elif [ $LAST_COMMAND == 135 ]; then
			PS1+="Fatal error signal 7"
		elif [ $LAST_COMMAND == 136 ]; then
			PS1+="Fatal error signal 8"
		elif [ $LAST_COMMAND == 137 ]; then
			PS1+="Fatal error signal 9"
		elif [ $LAST_COMMAND -gt 255 ]; then
			PS1+="Exit status out of range"
		else
			PS1+="Unknown error code"
		fi
		PS1+=")$NC\174\n"
	else
		PS1=""
	fi

	# Menu style bar on top of screen
	PS1+="$(draw_bar)"
	# PS1+="$(tput sc)\$(tput cup 0)$(tput rev)$(shell_info)$(printf '%*s' $((COLUMNS-95)) ' ') \174 $(cpu) \174 $(memusage) \174 $(get_pip) \174 $(get_date) $RESET\$(tput rc)"
	
	# Prompt begins
	PS1+="\n$LINE_UPPER_CORNER$LINE_STRAIGHT$LINE_STRAIGHT\174$(date +'%-I':%M:%S%P)\174$LINE_STRAIGHT"

	# Change username color if normal user or root
	if [[ $EUID -ne 0 ]]; then
		PS1+="\174$C8\u$c8@\h"
	else
		PS1+="\174$c2\u$c8@\h"
	fi

	# Current directory detailed info
	PS1+="\174$LINE_STRAIGHT\174$C8\$(pwd)$c8: $(lsfiledirsum) $(lsbytesum)Mb / $(dirsize) $(autojump)"

	# Change cursor color if normal user or root
	PS1+="\n$LINE_BOTTOM_CORNER$LINE_STRAIGHT$LINE_BOTTOM\174"

	if [[ $EUID -ne 0 ]]; then
		PS1+=$'\u2192 '
	else
		PS1+="$c2>$RESET "
	fi

	# PS2 is used to continue a command using the \ character
	PS2="$C1>$NC "
}
PROMPT_COMMAND="__setprompt; $PROMPT_COMMAND"
