#!/bin/bash
#
#	_______
#	\_   _/
#	  |_|horbits 
#
#	My bash config


#######################################################
#
#######################################################

####
matrix1() { 
	echo -e "\e[32m"  # Set text color to green
	while :; do
		for _ in {1..50}; do  # Repeat the animation 50 times for each row
			for _ in {1..160}; do
				r=$((RANDOM % 2))
				if [[ $((RANDOM % 5)) == 1 ]]; then
					if [[ $((RANDOM % 4)) == 1 ]]; then
						v+="\e[1m $r "  # Bold characters
					else
						v+="\e[2m $r "  # Dim characters
					fi
				else
					v+=" "
				fi
			done
			echo -e "$v"
			v=""
		done
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.2  # Adjust to desired speed	
	done
}

####
matrix2() { 
	perl -MTerm::ReadKey -e '
		use Term::ANSIColor;
		$|++;
		ReadMode 4;  # Turn off buffering

		while (1) {
			print color("green"), " " x (rand(35) + 1), int(rand(2)), color("reset");
			select(undef, undef, undef, 0.005);  # Adjust for sleep duration

			if (defined($key = ReadKey(-1))) {
				if (ord($key) == 27) {
					last;
				}
			}
		}

		ReadMode 0;  # Restore original terminal mode
		print "\n";  # Print a newline to clear any residual text
	'
}

####
matrix3() { 
	clear
	echo -ne "\e[32m"
	while true
	do
		echo -ne "\e[$(($RANDOM % 2 + 1))m"
		tr -c "[:alnum:][:punct:]" " " < /dev/urandom | dd count=1 bs=50 2> /dev/null
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
	done
}

####
matrix4() { 
	clear
	while true
	do
		COL=$((RANDOM % $(tput cols)))
		for ((i = 0; i < COL; i++)); do
			tput cup $i $COL
			echo -e "\033[0;32m" $(cat /dev/urandom | head -1 | cut -c1-1) 2>/dev/null
		done
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.2  # Adjust to desired speed
	done
}

####
matrix5() { 
	while true
	do
		tr -c "[:alnum:][:punct:]" " " < /dev/urandom | dd cbs=$COLUMNS conv=unblock | GREP_COLOR="1;32" grep --color "[^ ]"
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.0000001 # Adjust to desired speed
	done
}

####
xlights1() { 
	clear
	while :
	do
		echo -ne "\033[$((1+RANDOM%LINES));$((1+RANDOM%COLUMNS))H\033[$((RANDOM%2));3$((RANDOM%8))m$((RANDOM%10))"
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.01 # Adjust to desired speed
	done
}

####
xlights2() { 
    clear
    while true
    do
        for i in {0..7}; do
            x=$(($RANDOM % $(tput cols)))
            y=$(($RANDOM % $(tput lines)))

            for j in 91 92 93 88; do
                tput cup $y $x
                echo -en "\E[3${i}m\u25$j"
                x=$((x + 1))
                if [ $x -ge $(tput cols) ]; then
                    x=0
                    y=$((y + 1))
                fi
            done
        done
        # Check for ESC key press
        read -n 1 -s -t 0.1 key
        if [[ $key == $'\e' ]]; then
            clear
            break
        fi
        sleep 0.5  # Adjust to desired speed
        clear
    done
}

####
xblocks() { 
    clear
    symbols="!@#$%^&*()-=_+[]{}|;:',.<>/?"
    letters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

    while true; do
        x=$(($RANDOM % $(tput cols)))
        y=$(($RANDOM % $(tput lines)))

        for i in {1..4}; do
            tput cup $y $x

            if [ $((RANDOM % 2)) -eq 0 ]; then
                # Display a random symbol
                random_symbol=${symbols:$((RANDOM % ${#symbols})):1}
                echo -en "\E[36m$random_symbol"
            else
                # Display a random letter
                random_letter=${letters:$((RANDOM % ${#letters})):1}
                echo -en "\E[32m$random_letter"
            fi

            x=$((x + 1))
            if [ $x -ge $(tput cols) ]; then
                x=0
                y=$((y + 1))
            fi
        done
        # Check for ESC key press
        read -n 1 -s -t 0.1 key
        if [[ $key == $'\e' ]]; then
            clear
            break
        fi
        sleep 0.5  # Adjust to desired speed
        clear
    done
}

####
matrix() {
    local script_name="matrix.sh"
    local script_url="https://bruxy.regnet.cz/linux/matrix/matrix.sh"
    local home_directory="$HOME"
    local script_path="$home_directory/$script_name"

    # Check if the script exists in the home directory
    if [ -f "$script_path" ]; then
        echo "Executing existing script: $script_name"
        bash "$script_path"
    else
        # Download the script from the URL
        wget -O "$script_path" "$script_url"
        if [ $? -eq 0 ]; then
            # Make the script executable
            # chmod +x "$script_path"
            # Execute the downloaded script
            bash "$script_path"
        fi
    fi
}

