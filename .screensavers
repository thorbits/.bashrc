#!/bin/bash
#
#	_______
#	\_   _/
#	  |_|horbits 
#
#	My bash config


#######################################################
#
#######################################################

####
matrix1() { 
	echo -e "\e[32m"  # Set text color to green
	while :; do
		for _ in {1..50}; do  # Repeat the animation 50 times for each row
			for _ in {1..160}; do
				r=$((RANDOM % 2))
				if [[ $((RANDOM % 5)) == 1 ]]; then
					if [[ $((RANDOM % 4)) == 1 ]]; then
						v+="\e[1m $r "  # Bold characters
					else
						v+="\e[2m $r "  # Dim characters
					fi
				else
					v+=" "
				fi
			done
			echo -e "$v"
			v=""
		done
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.2  # Adjust to desired speed	
	done
}

####
matrix2() { 
	clear
	echo -ne "\e[32m"
	while true
	do
		echo -ne "\e[$(($RANDOM % 2 + 1))m"
		tr -c "[:alnum:][:punct:]" " " < /dev/urandom | dd count=1 bs=50 2> /dev/null
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
	done
}

####
matrix3() { 
	while true
	do
		tr -c "[:alnum:][:punct:]" " " < /dev/urandom | dd cbs=$COLUMNS conv=unblock | GREP_COLOR="1;32" grep --color "[^ ]"
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
	done
}

####
matrix4() { 
	local COL=$(( $(tput cols) / 2 ))
	clear
	tput setaf 2

	while true
	do
		tput cup $((RANDOM%COL)) $((RANDOM%COL))
		printf "%$((RANDOM%COL))s" $((RANDOM%2))
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
	done
}

####
matrix5() { 
	perl -MTerm::ReadKey -e '
		use Term::ANSIColor;
		$|++;
		ReadMode 4;  # Turn off buffering

		while (1) {
			print color("green"), " " x (rand(35) + 1), int(rand(2)), color("reset");
			select(undef, undef, undef, 0.005);  # Adjust for sleep duration

			if (defined($key = ReadKey(-1))) {
				if (ord($key) == 27) {
					last;
				}
			}
		}

		ReadMode 0;  # Restore original terminal mode
		print "\n";  # Print a newline to clear any residual text
	'
}

####
xlights() { 
	clear
	while true
	do
		for i in {0..7}; do
			x=$(($RANDOM % $(tput cols)))
			y=$(($RANDOM % $(tput lines)))
		for j in 91 92 93 88; do
			tput cup $y $x
			echo -en "\E[3${i}m\u25$j"
			x=$((x + 1))
		if [ $x -ge $(tput cols) ]; then
			x=0
			y=$((y + 1))
		fi
		done
	done
	# Check for ESC key press
	read -n 1 -s -t 0.1 key
	if [[ $key == $'\e' ]]; then
		clear
		break
	fi
	sleep 0.5  # Adjust to desired speed
	clear
	done
}

####
matrix() { 
	local script_name="matrix.sh"
	local script_url="https://bruxy.regnet.cz/linux/matrix/matrix.sh"
	local home_dir="$HOME"
	local script_path="$home_dir/$script_name"

	if [ -f "$script_path" ]; then
		bash "$script_path"
	else
		wget -O "$script_path" "$script_url" && bash "$script_path"
	fi
}

####
fire() { 
	local script_name="fire.sh"
	local script_url="https://bruxy.regnet.cz/linux/flames/fire.sh"
	local home_dir="$HOME"
	local script_path="$home_dir/$script_name"

	if [ -f "$script_path" ]; then
		bash "$script_path"
	else
		wget -O "$script_path" "$script_url" && bash "$script_path"
	fi
}

####
xtest() { 
	clear
	symbols="!@#$%^&*()-=_+[]{}|;:',.<>/?"
	letters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

	while true
	do
		x=$(($RANDOM % $(tput cols)))
		y=$(($RANDOM % $(tput lines)))
		for i in {1..4}; do
			tput cup $y $x
			if [ $((RANDOM % 2)) -eq 0 ]; then
				# Display a random symbol
				random_symbol=${symbols:$((RANDOM % ${#symbols})):1}
				echo -en "\E[36m$random_symbol"
			else
				# Display a random letter
				random_letter=${letters:$((RANDOM % ${#letters})):1}
				echo -en "\E[32m$random_letter"
			fi
		x=$((x + 1))
		if [ $x -ge $(tput cols) ]; then
			x=0
			y=$((y + 1))
		fi
		done

	# Check for ESC key press
	read -n 1 -s -t 0.1 key
	if [[ $key == $'\e' ]]; then
		clear
		break
	fi
	sleep 0.5  # Adjust to desired speed
	clear
	done
}

####
xanim() { 
	local anim_name="animate.ANS"
	local anim_url="url"
	local home_directory="$HOME"
	local anim_path="$home_directory/$anim_name"
	local SPEED=".005" # wait this time each line

	# Check if the script exists in the home directory
	if [ -f "$anim_path" ]; then
		# Disable cursor
		printf "\e[?25l"
		# Download, convert, display slow == play animation
		curl --silent "$anim_url" | iconv -f cp437 -t utf-8 | awk "{system(\"sleep $SPEED\");print}"
		# Enable cursor
		printf "\e[?12l\e[?25h"
	else
		# Download the script from the URL
		wget -O "$anim_path" "$anim_url"
		if [ $? -eq 0 ]; then
			# Disable cursor
			printf "\e[?25l"
			# Download, convert, display slow == play animation
			curl --silent "$anim_url" | iconv -f cp437 -t utf-8 | awk "{system(\"sleep $SPEED\");print}"
			# Enable cursor
			printf "\e[?12l\e[?25h"
		fi
	fi
}

