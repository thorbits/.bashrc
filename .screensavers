#!/bin/bash
#
#	_______
#	\_   _/
#	  |_|horbits 
#
#	My bash config


#######################################################
#
#######################################################

####
matrix1() { 
	echo -e "\e[32m"  # Set text color to green
	while :; do
		for _ in {1..50}; do  # Repeat the animation 50 times for each row
			for _ in {1..160}; do
				r=$((RANDOM % 2))
				if [[ $((RANDOM % 5)) == 1 ]]; then
					if [[ $((RANDOM % 4)) == 1 ]]; then
						v+="\e[1m $r "  # Bold characters
					else
						v+="\e[2m $r "  # Dim characters
					fi
				else
					v+=" "
				fi
			done
			echo -e "$v"
			v=""
		done
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.2  # Adjust to desired speed	
	done
}

####
matrix2() { 
	perl -MTerm::ReadKey -e '
		use Term::ANSIColor;
		$|++;
		ReadMode 4;  # Turn off buffering

		while (1) {
			print color("green"), " " x (rand(35) + 1), int(rand(2)), color("reset");
			select(undef, undef, undef, 0.005);  # Adjust for sleep duration

			if (defined($key = ReadKey(-1))) {
				if (ord($key) == 27) {
					last;
				}
			}
		}

		ReadMode 0;  # Restore original terminal mode
		print "\n";  # Print a newline to clear any residual text
	'
}

####
matrix3() { 
	clear
	echo -ne "\e[32m"
	while true
	do
		echo -ne "\e[$(($RANDOM % 2 + 1))m"
		tr -c "[:alnum:][:punct:]" " " < /dev/urandom | dd count=1 bs=50 2> /dev/null
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
	done
}

####
matrix4() { 
	clear
	while true
	do
		COL=$((RANDOM % $(tput cols)))
		for ((i = 0; i < COL; i++)); do
			tput cup $i $COL
			echo -e "\033[0;32m" $(cat /dev/urandom | head -1 | cut -c1-1) 2>/dev/null
		done
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.2  # Adjust to desired speed
	done
}

####
matrix5() { 
	while :
	do
		tr -c "[:alnum:][:punct:]" " " < /dev/urandom | dd cbs=$COLUMNS conv=unblock | GREP_COLOR="1;32" grep --color "[^ ]"
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.1 # Adjust to desired speed
	done
}

####
N_LINE=$(( $(tput lines) - 1));
N_COLUMN=$(tput cols);

function m6get {
    RANDOM_U=$(echo $(( (RANDOM % 9) + 0)));
    RANDOM_D=$(echo $(( (RANDOM % 9) + 0)));
    
    #https://unicode-table.com/en/#kangxi-radicals
    CHAR_TYPE="\u04"

    printf "%s" "$CHAR_TYPE$RANDOM_D$RANDOM_U";
}

function m6cursor {
    echo "\033[$1;${RANDOM_COLUMN}H";
}

function m6write {
    CHAR=$(m6get);
    m6print $1 $2 $CHAR
}

function m6erase { 
    CHAR="\u0020" #Space char
    m6print $1 $2 $CHAR
}

function m6print {
    CURSOR=$(m6cursor $1);
    echo -e "$CURSOR$2$3";
}

function m6draw {    
    RANDOM_COLUMN=$[RANDOM%N_COLUMN];
    RANDOM_LINE_SIZE=$(echo $(( (RANDOM % $N_LINE) + 1)));
    SPEED=0.05

    COLOR="\033[32m"; #GREEN
    COLOR_HEAD="\033[37m"; #WHITE

    #Draw Line
    for i in $(seq 1 $N_LINE ); do 
        m6write $[i-1] $COLOR;
        m6write $i $COLOR_HEAD;
        sleep $SPEED;
        if [ $i -ge $RANDOM_LINE_SIZE ]; then 
            m6erase $[i-RANDOM_LINE_SIZE]; 
        fi;
    done;

    #Erase Line
    for i in $(seq $[i-$RANDOM_LINE_SIZE] $N_LINE); do 
        m6erase $i
        sleep $SPEED;
    done
}

matrix6() { 
    tput setab 000 #Background Black
    clear
    while true; do
        m6draw & #Parallel
        sleep 0.5;
    done
}

####
xlights() { 
	clear
	while :
	do
		echo -ne "\033[$((1+RANDOM%LINES));$((1+RANDOM%COLUMNS))H\033[$((RANDOM%2));3$((RANDOM%8))m$((RANDOM%10))"
		# Check for ESC key press
		read -n 1 -s -t 0.1 key
		if [[ $key == $'\e' ]]; then
			clear
			break
		fi
		sleep 0.01 # Adjust to desired speed
	done
}

